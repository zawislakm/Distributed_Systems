/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-05-01")
public class PrinterDevice implements org.apache.thrift.TBase<PrinterDevice, PrinterDevice._Fields>, java.io.Serializable, Cloneable, Comparable<PrinterDevice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrinterDevice");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CARTRIDGE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("cartridgeLevel", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PRINTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("printerType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SHEES_OF_PAPER_FIELD_DESC = new org.apache.thrift.protocol.TField("sheesOfPaper", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PrinterDeviceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PrinterDeviceTupleSchemeFactory();

  public int id; // required
  public double cartridgeLevel; // required
  /**
   * 
   * @see PrinterType
   */
  public @org.apache.thrift.annotation.Nullable PrinterType printerType; // required
  public int sheesOfPaper; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CARTRIDGE_LEVEL((short)2, "cartridgeLevel"),
    /**
     * 
     * @see PrinterType
     */
    PRINTER_TYPE((short)3, "printerType"),
    SHEES_OF_PAPER((short)4, "sheesOfPaper");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CARTRIDGE_LEVEL
          return CARTRIDGE_LEVEL;
        case 3: // PRINTER_TYPE
          return PRINTER_TYPE;
        case 4: // SHEES_OF_PAPER
          return SHEES_OF_PAPER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CARTRIDGELEVEL_ISSET_ID = 1;
  private static final int __SHEESOFPAPER_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARTRIDGE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("cartridgeLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRINTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("printerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PrinterType.class)));
    tmpMap.put(_Fields.SHEES_OF_PAPER, new org.apache.thrift.meta_data.FieldMetaData("sheesOfPaper", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrinterDevice.class, metaDataMap);
  }

  public PrinterDevice() {
  }

  public PrinterDevice(
    int id,
    double cartridgeLevel,
    PrinterType printerType,
    int sheesOfPaper)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.cartridgeLevel = cartridgeLevel;
    setCartridgeLevelIsSet(true);
    this.printerType = printerType;
    this.sheesOfPaper = sheesOfPaper;
    setSheesOfPaperIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrinterDevice(PrinterDevice other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.cartridgeLevel = other.cartridgeLevel;
    if (other.isSetPrinterType()) {
      this.printerType = other.printerType;
    }
    this.sheesOfPaper = other.sheesOfPaper;
  }

  @Override
  public PrinterDevice deepCopy() {
    return new PrinterDevice(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCartridgeLevelIsSet(false);
    this.cartridgeLevel = 0.0;
    this.printerType = null;
    setSheesOfPaperIsSet(false);
    this.sheesOfPaper = 0;
  }

  public int getId() {
    return this.id;
  }

  public PrinterDevice setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getCartridgeLevel() {
    return this.cartridgeLevel;
  }

  public PrinterDevice setCartridgeLevel(double cartridgeLevel) {
    this.cartridgeLevel = cartridgeLevel;
    setCartridgeLevelIsSet(true);
    return this;
  }

  public void unsetCartridgeLevel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CARTRIDGELEVEL_ISSET_ID);
  }

  /** Returns true if field cartridgeLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetCartridgeLevel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CARTRIDGELEVEL_ISSET_ID);
  }

  public void setCartridgeLevelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CARTRIDGELEVEL_ISSET_ID, value);
  }

  /**
   * 
   * @see PrinterType
   */
  @org.apache.thrift.annotation.Nullable
  public PrinterType getPrinterType() {
    return this.printerType;
  }

  /**
   * 
   * @see PrinterType
   */
  public PrinterDevice setPrinterType(@org.apache.thrift.annotation.Nullable PrinterType printerType) {
    this.printerType = printerType;
    return this;
  }

  public void unsetPrinterType() {
    this.printerType = null;
  }

  /** Returns true if field printerType is set (has been assigned a value) and false otherwise */
  public boolean isSetPrinterType() {
    return this.printerType != null;
  }

  public void setPrinterTypeIsSet(boolean value) {
    if (!value) {
      this.printerType = null;
    }
  }

  public int getSheesOfPaper() {
    return this.sheesOfPaper;
  }

  public PrinterDevice setSheesOfPaper(int sheesOfPaper) {
    this.sheesOfPaper = sheesOfPaper;
    setSheesOfPaperIsSet(true);
    return this;
  }

  public void unsetSheesOfPaper() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHEESOFPAPER_ISSET_ID);
  }

  /** Returns true if field sheesOfPaper is set (has been assigned a value) and false otherwise */
  public boolean isSetSheesOfPaper() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHEESOFPAPER_ISSET_ID);
  }

  public void setSheesOfPaperIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHEESOFPAPER_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case CARTRIDGE_LEVEL:
      if (value == null) {
        unsetCartridgeLevel();
      } else {
        setCartridgeLevel((java.lang.Double)value);
      }
      break;

    case PRINTER_TYPE:
      if (value == null) {
        unsetPrinterType();
      } else {
        setPrinterType((PrinterType)value);
      }
      break;

    case SHEES_OF_PAPER:
      if (value == null) {
        unsetSheesOfPaper();
      } else {
        setSheesOfPaper((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CARTRIDGE_LEVEL:
      return getCartridgeLevel();

    case PRINTER_TYPE:
      return getPrinterType();

    case SHEES_OF_PAPER:
      return getSheesOfPaper();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CARTRIDGE_LEVEL:
      return isSetCartridgeLevel();
    case PRINTER_TYPE:
      return isSetPrinterType();
    case SHEES_OF_PAPER:
      return isSetSheesOfPaper();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof PrinterDevice)
      return this.equals((PrinterDevice)that);
    return false;
  }

  public boolean equals(PrinterDevice that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_cartridgeLevel = true;
    boolean that_present_cartridgeLevel = true;
    if (this_present_cartridgeLevel || that_present_cartridgeLevel) {
      if (!(this_present_cartridgeLevel && that_present_cartridgeLevel))
        return false;
      if (this.cartridgeLevel != that.cartridgeLevel)
        return false;
    }

    boolean this_present_printerType = true && this.isSetPrinterType();
    boolean that_present_printerType = true && that.isSetPrinterType();
    if (this_present_printerType || that_present_printerType) {
      if (!(this_present_printerType && that_present_printerType))
        return false;
      if (!this.printerType.equals(that.printerType))
        return false;
    }

    boolean this_present_sheesOfPaper = true;
    boolean that_present_sheesOfPaper = true;
    if (this_present_sheesOfPaper || that_present_sheesOfPaper) {
      if (!(this_present_sheesOfPaper && that_present_sheesOfPaper))
        return false;
      if (this.sheesOfPaper != that.sheesOfPaper)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cartridgeLevel);

    hashCode = hashCode * 8191 + ((isSetPrinterType()) ? 131071 : 524287);
    if (isSetPrinterType())
      hashCode = hashCode * 8191 + printerType.getValue();

    hashCode = hashCode * 8191 + sheesOfPaper;

    return hashCode;
  }

  @Override
  public int compareTo(PrinterDevice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCartridgeLevel(), other.isSetCartridgeLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartridgeLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartridgeLevel, other.cartridgeLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrinterType(), other.isSetPrinterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrinterType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printerType, other.printerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSheesOfPaper(), other.isSetSheesOfPaper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSheesOfPaper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sheesOfPaper, other.sheesOfPaper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PrinterDevice(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartridgeLevel:");
    sb.append(this.cartridgeLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("printerType:");
    if (this.printerType == null) {
      sb.append("null");
    } else {
      sb.append(this.printerType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sheesOfPaper:");
    sb.append(this.sheesOfPaper);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrinterDeviceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrinterDeviceStandardScheme getScheme() {
      return new PrinterDeviceStandardScheme();
    }
  }

  private static class PrinterDeviceStandardScheme extends org.apache.thrift.scheme.StandardScheme<PrinterDevice> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, PrinterDevice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CARTRIDGE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cartridgeLevel = iprot.readDouble();
              struct.setCartridgeLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRINTER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.printerType = PrinterType.findByValue(iprot.readI32());
              struct.setPrinterTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHEES_OF_PAPER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sheesOfPaper = iprot.readI32();
              struct.setSheesOfPaperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, PrinterDevice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CARTRIDGE_LEVEL_FIELD_DESC);
      oprot.writeDouble(struct.cartridgeLevel);
      oprot.writeFieldEnd();
      if (struct.printerType != null) {
        oprot.writeFieldBegin(PRINTER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.printerType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHEES_OF_PAPER_FIELD_DESC);
      oprot.writeI32(struct.sheesOfPaper);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrinterDeviceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PrinterDeviceTupleScheme getScheme() {
      return new PrinterDeviceTupleScheme();
    }
  }

  private static class PrinterDeviceTupleScheme extends org.apache.thrift.scheme.TupleScheme<PrinterDevice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrinterDevice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCartridgeLevel()) {
        optionals.set(1);
      }
      if (struct.isSetPrinterType()) {
        optionals.set(2);
      }
      if (struct.isSetSheesOfPaper()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCartridgeLevel()) {
        oprot.writeDouble(struct.cartridgeLevel);
      }
      if (struct.isSetPrinterType()) {
        oprot.writeI32(struct.printerType.getValue());
      }
      if (struct.isSetSheesOfPaper()) {
        oprot.writeI32(struct.sheesOfPaper);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrinterDevice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cartridgeLevel = iprot.readDouble();
        struct.setCartridgeLevelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.printerType = PrinterType.findByValue(iprot.readI32());
        struct.setPrinterTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sheesOfPaper = iprot.readI32();
        struct.setSheesOfPaperIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

