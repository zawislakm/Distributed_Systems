/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-05-01")
public class PlayerDevice implements org.apache.thrift.TBase<PlayerDevice, PlayerDevice._Fields>, java.io.Serializable, Cloneable, Comparable<PlayerDevice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlayerDevice");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PLAYER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("playerType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cdType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RADIO_STATION_FIELD_DESC = new org.apache.thrift.protocol.TField("radioStation", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PlayerDeviceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PlayerDeviceTupleSchemeFactory();

  public int id; // required
  /**
   * 
   * @see PlayerType
   */
  public @org.apache.thrift.annotation.Nullable PlayerType playerType; // required
  /**
   * 
   * @see MusicType
   */
  public @org.apache.thrift.annotation.Nullable MusicType cdType; // optional
  public double radioStation; // optional
  public double volume; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see PlayerType
     */
    PLAYER_TYPE((short)2, "playerType"),
    /**
     * 
     * @see MusicType
     */
    CD_TYPE((short)3, "cdType"),
    RADIO_STATION((short)4, "radioStation"),
    VOLUME((short)5, "volume");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PLAYER_TYPE
          return PLAYER_TYPE;
        case 3: // CD_TYPE
          return CD_TYPE;
        case 4: // RADIO_STATION
          return RADIO_STATION;
        case 5: // VOLUME
          return VOLUME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __RADIOSTATION_ISSET_ID = 1;
  private static final int __VOLUME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CD_TYPE,_Fields.RADIO_STATION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAYER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("playerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PlayerType.class)));
    tmpMap.put(_Fields.CD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cdType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MusicType.class)));
    tmpMap.put(_Fields.RADIO_STATION, new org.apache.thrift.meta_data.FieldMetaData("radioStation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlayerDevice.class, metaDataMap);
  }

  public PlayerDevice() {
  }

  public PlayerDevice(
    int id,
    PlayerType playerType,
    double volume)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.playerType = playerType;
    this.volume = volume;
    setVolumeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlayerDevice(PlayerDevice other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetPlayerType()) {
      this.playerType = other.playerType;
    }
    if (other.isSetCdType()) {
      this.cdType = other.cdType;
    }
    this.radioStation = other.radioStation;
    this.volume = other.volume;
  }

  @Override
  public PlayerDevice deepCopy() {
    return new PlayerDevice(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.playerType = null;
    this.cdType = null;
    setRadioStationIsSet(false);
    this.radioStation = 0.0;
    setVolumeIsSet(false);
    this.volume = 0.0;
  }

  public int getId() {
    return this.id;
  }

  public PlayerDevice setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 
   * @see PlayerType
   */
  @org.apache.thrift.annotation.Nullable
  public PlayerType getPlayerType() {
    return this.playerType;
  }

  /**
   * 
   * @see PlayerType
   */
  public PlayerDevice setPlayerType(@org.apache.thrift.annotation.Nullable PlayerType playerType) {
    this.playerType = playerType;
    return this;
  }

  public void unsetPlayerType() {
    this.playerType = null;
  }

  /** Returns true if field playerType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerType() {
    return this.playerType != null;
  }

  public void setPlayerTypeIsSet(boolean value) {
    if (!value) {
      this.playerType = null;
    }
  }

  /**
   * 
   * @see MusicType
   */
  @org.apache.thrift.annotation.Nullable
  public MusicType getCdType() {
    return this.cdType;
  }

  /**
   * 
   * @see MusicType
   */
  public PlayerDevice setCdType(@org.apache.thrift.annotation.Nullable MusicType cdType) {
    this.cdType = cdType;
    return this;
  }

  public void unsetCdType() {
    this.cdType = null;
  }

  /** Returns true if field cdType is set (has been assigned a value) and false otherwise */
  public boolean isSetCdType() {
    return this.cdType != null;
  }

  public void setCdTypeIsSet(boolean value) {
    if (!value) {
      this.cdType = null;
    }
  }

  public double getRadioStation() {
    return this.radioStation;
  }

  public PlayerDevice setRadioStation(double radioStation) {
    this.radioStation = radioStation;
    setRadioStationIsSet(true);
    return this;
  }

  public void unsetRadioStation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RADIOSTATION_ISSET_ID);
  }

  /** Returns true if field radioStation is set (has been assigned a value) and false otherwise */
  public boolean isSetRadioStation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RADIOSTATION_ISSET_ID);
  }

  public void setRadioStationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RADIOSTATION_ISSET_ID, value);
  }

  public double getVolume() {
    return this.volume;
  }

  public PlayerDevice setVolume(double volume) {
    this.volume = volume;
    setVolumeIsSet(true);
    return this;
  }

  public void unsetVolume() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void setVolumeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case PLAYER_TYPE:
      if (value == null) {
        unsetPlayerType();
      } else {
        setPlayerType((PlayerType)value);
      }
      break;

    case CD_TYPE:
      if (value == null) {
        unsetCdType();
      } else {
        setCdType((MusicType)value);
      }
      break;

    case RADIO_STATION:
      if (value == null) {
        unsetRadioStation();
      } else {
        setRadioStation((java.lang.Double)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PLAYER_TYPE:
      return getPlayerType();

    case CD_TYPE:
      return getCdType();

    case RADIO_STATION:
      return getRadioStation();

    case VOLUME:
      return getVolume();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PLAYER_TYPE:
      return isSetPlayerType();
    case CD_TYPE:
      return isSetCdType();
    case RADIO_STATION:
      return isSetRadioStation();
    case VOLUME:
      return isSetVolume();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof PlayerDevice)
      return this.equals((PlayerDevice)that);
    return false;
  }

  public boolean equals(PlayerDevice that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_playerType = true && this.isSetPlayerType();
    boolean that_present_playerType = true && that.isSetPlayerType();
    if (this_present_playerType || that_present_playerType) {
      if (!(this_present_playerType && that_present_playerType))
        return false;
      if (!this.playerType.equals(that.playerType))
        return false;
    }

    boolean this_present_cdType = true && this.isSetCdType();
    boolean that_present_cdType = true && that.isSetCdType();
    if (this_present_cdType || that_present_cdType) {
      if (!(this_present_cdType && that_present_cdType))
        return false;
      if (!this.cdType.equals(that.cdType))
        return false;
    }

    boolean this_present_radioStation = true && this.isSetRadioStation();
    boolean that_present_radioStation = true && that.isSetRadioStation();
    if (this_present_radioStation || that_present_radioStation) {
      if (!(this_present_radioStation && that_present_radioStation))
        return false;
      if (this.radioStation != that.radioStation)
        return false;
    }

    boolean this_present_volume = true;
    boolean that_present_volume = true;
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetPlayerType()) ? 131071 : 524287);
    if (isSetPlayerType())
      hashCode = hashCode * 8191 + playerType.getValue();

    hashCode = hashCode * 8191 + ((isSetCdType()) ? 131071 : 524287);
    if (isSetCdType())
      hashCode = hashCode * 8191 + cdType.getValue();

    hashCode = hashCode * 8191 + ((isSetRadioStation()) ? 131071 : 524287);
    if (isSetRadioStation())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(radioStation);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(volume);

    return hashCode;
  }

  @Override
  public int compareTo(PlayerDevice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPlayerType(), other.isSetPlayerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerType, other.playerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCdType(), other.isSetCdType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCdType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdType, other.cdType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRadioStation(), other.isSetRadioStation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRadioStation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radioStation, other.radioStation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVolume(), other.isSetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PlayerDevice(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerType:");
    if (this.playerType == null) {
      sb.append("null");
    } else {
      sb.append(this.playerType);
    }
    first = false;
    if (isSetCdType()) {
      if (!first) sb.append(", ");
      sb.append("cdType:");
      if (this.cdType == null) {
        sb.append("null");
      } else {
        sb.append(this.cdType);
      }
      first = false;
    }
    if (isSetRadioStation()) {
      if (!first) sb.append(", ");
      sb.append("radioStation:");
      sb.append(this.radioStation);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("volume:");
    sb.append(this.volume);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlayerDeviceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PlayerDeviceStandardScheme getScheme() {
      return new PlayerDeviceStandardScheme();
    }
  }

  private static class PlayerDeviceStandardScheme extends org.apache.thrift.scheme.StandardScheme<PlayerDevice> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, PlayerDevice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAYER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.playerType = PlayerType.findByValue(iprot.readI32());
              struct.setPlayerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cdType = MusicType.findByValue(iprot.readI32());
              struct.setCdTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RADIO_STATION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.radioStation = iprot.readDouble();
              struct.setRadioStationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.volume = iprot.readDouble();
              struct.setVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, PlayerDevice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.playerType != null) {
        oprot.writeFieldBegin(PLAYER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.playerType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.cdType != null) {
        if (struct.isSetCdType()) {
          oprot.writeFieldBegin(CD_TYPE_FIELD_DESC);
          oprot.writeI32(struct.cdType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRadioStation()) {
        oprot.writeFieldBegin(RADIO_STATION_FIELD_DESC);
        oprot.writeDouble(struct.radioStation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VOLUME_FIELD_DESC);
      oprot.writeDouble(struct.volume);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlayerDeviceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PlayerDeviceTupleScheme getScheme() {
      return new PlayerDeviceTupleScheme();
    }
  }

  private static class PlayerDeviceTupleScheme extends org.apache.thrift.scheme.TupleScheme<PlayerDevice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlayerDevice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPlayerType()) {
        optionals.set(1);
      }
      if (struct.isSetCdType()) {
        optionals.set(2);
      }
      if (struct.isSetRadioStation()) {
        optionals.set(3);
      }
      if (struct.isSetVolume()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetPlayerType()) {
        oprot.writeI32(struct.playerType.getValue());
      }
      if (struct.isSetCdType()) {
        oprot.writeI32(struct.cdType.getValue());
      }
      if (struct.isSetRadioStation()) {
        oprot.writeDouble(struct.radioStation);
      }
      if (struct.isSetVolume()) {
        oprot.writeDouble(struct.volume);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlayerDevice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.playerType = PlayerType.findByValue(iprot.readI32());
        struct.setPlayerTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cdType = MusicType.findByValue(iprot.readI32());
        struct.setCdTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.radioStation = iprot.readDouble();
        struct.setRadioStationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.volume = iprot.readDouble();
        struct.setVolumeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

