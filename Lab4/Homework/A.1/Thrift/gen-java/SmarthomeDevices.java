/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-05-01")
public class SmarthomeDevices implements org.apache.thrift.TBase<SmarthomeDevices, SmarthomeDevices._Fields>, java.io.Serializable, Cloneable, Comparable<SmarthomeDevices> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SmarthomeDevices");

  private static final org.apache.thrift.protocol.TField PROJECTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("projectors", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PRINTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("printers", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PLAYERS_FIELD_DESC = new org.apache.thrift.protocol.TField("players", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SmarthomeDevicesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SmarthomeDevicesTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<ProjectorDevice> projectors; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<PrinterDevice> printers; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<PlayerDevice> players; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECTORS((short)1, "projectors"),
    PRINTERS((short)2, "printers"),
    PLAYERS((short)3, "players");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECTORS
          return PROJECTORS;
        case 2: // PRINTERS
          return PRINTERS;
        case 3: // PLAYERS
          return PLAYERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECTORS, new org.apache.thrift.meta_data.FieldMetaData("projectors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectorDevice.class))));
    tmpMap.put(_Fields.PRINTERS, new org.apache.thrift.meta_data.FieldMetaData("printers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrinterDevice.class))));
    tmpMap.put(_Fields.PLAYERS, new org.apache.thrift.meta_data.FieldMetaData("players", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerDevice.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SmarthomeDevices.class, metaDataMap);
  }

  public SmarthomeDevices() {
  }

  public SmarthomeDevices(
    java.util.List<ProjectorDevice> projectors,
    java.util.List<PrinterDevice> printers,
    java.util.List<PlayerDevice> players)
  {
    this();
    this.projectors = projectors;
    this.printers = printers;
    this.players = players;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SmarthomeDevices(SmarthomeDevices other) {
    if (other.isSetProjectors()) {
      java.util.List<ProjectorDevice> __this__projectors = new java.util.ArrayList<ProjectorDevice>(other.projectors.size());
      for (ProjectorDevice other_element : other.projectors) {
        __this__projectors.add(new ProjectorDevice(other_element));
      }
      this.projectors = __this__projectors;
    }
    if (other.isSetPrinters()) {
      java.util.List<PrinterDevice> __this__printers = new java.util.ArrayList<PrinterDevice>(other.printers.size());
      for (PrinterDevice other_element : other.printers) {
        __this__printers.add(new PrinterDevice(other_element));
      }
      this.printers = __this__printers;
    }
    if (other.isSetPlayers()) {
      java.util.List<PlayerDevice> __this__players = new java.util.ArrayList<PlayerDevice>(other.players.size());
      for (PlayerDevice other_element : other.players) {
        __this__players.add(new PlayerDevice(other_element));
      }
      this.players = __this__players;
    }
  }

  @Override
  public SmarthomeDevices deepCopy() {
    return new SmarthomeDevices(this);
  }

  @Override
  public void clear() {
    this.projectors = null;
    this.printers = null;
    this.players = null;
  }

  public int getProjectorsSize() {
    return (this.projectors == null) ? 0 : this.projectors.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ProjectorDevice> getProjectorsIterator() {
    return (this.projectors == null) ? null : this.projectors.iterator();
  }

  public void addToProjectors(ProjectorDevice elem) {
    if (this.projectors == null) {
      this.projectors = new java.util.ArrayList<ProjectorDevice>();
    }
    this.projectors.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ProjectorDevice> getProjectors() {
    return this.projectors;
  }

  public SmarthomeDevices setProjectors(@org.apache.thrift.annotation.Nullable java.util.List<ProjectorDevice> projectors) {
    this.projectors = projectors;
    return this;
  }

  public void unsetProjectors() {
    this.projectors = null;
  }

  /** Returns true if field projectors is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectors() {
    return this.projectors != null;
  }

  public void setProjectorsIsSet(boolean value) {
    if (!value) {
      this.projectors = null;
    }
  }

  public int getPrintersSize() {
    return (this.printers == null) ? 0 : this.printers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PrinterDevice> getPrintersIterator() {
    return (this.printers == null) ? null : this.printers.iterator();
  }

  public void addToPrinters(PrinterDevice elem) {
    if (this.printers == null) {
      this.printers = new java.util.ArrayList<PrinterDevice>();
    }
    this.printers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<PrinterDevice> getPrinters() {
    return this.printers;
  }

  public SmarthomeDevices setPrinters(@org.apache.thrift.annotation.Nullable java.util.List<PrinterDevice> printers) {
    this.printers = printers;
    return this;
  }

  public void unsetPrinters() {
    this.printers = null;
  }

  /** Returns true if field printers is set (has been assigned a value) and false otherwise */
  public boolean isSetPrinters() {
    return this.printers != null;
  }

  public void setPrintersIsSet(boolean value) {
    if (!value) {
      this.printers = null;
    }
  }

  public int getPlayersSize() {
    return (this.players == null) ? 0 : this.players.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PlayerDevice> getPlayersIterator() {
    return (this.players == null) ? null : this.players.iterator();
  }

  public void addToPlayers(PlayerDevice elem) {
    if (this.players == null) {
      this.players = new java.util.ArrayList<PlayerDevice>();
    }
    this.players.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<PlayerDevice> getPlayers() {
    return this.players;
  }

  public SmarthomeDevices setPlayers(@org.apache.thrift.annotation.Nullable java.util.List<PlayerDevice> players) {
    this.players = players;
    return this;
  }

  public void unsetPlayers() {
    this.players = null;
  }

  /** Returns true if field players is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayers() {
    return this.players != null;
  }

  public void setPlayersIsSet(boolean value) {
    if (!value) {
      this.players = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PROJECTORS:
      if (value == null) {
        unsetProjectors();
      } else {
        setProjectors((java.util.List<ProjectorDevice>)value);
      }
      break;

    case PRINTERS:
      if (value == null) {
        unsetPrinters();
      } else {
        setPrinters((java.util.List<PrinterDevice>)value);
      }
      break;

    case PLAYERS:
      if (value == null) {
        unsetPlayers();
      } else {
        setPlayers((java.util.List<PlayerDevice>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECTORS:
      return getProjectors();

    case PRINTERS:
      return getPrinters();

    case PLAYERS:
      return getPlayers();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROJECTORS:
      return isSetProjectors();
    case PRINTERS:
      return isSetPrinters();
    case PLAYERS:
      return isSetPlayers();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SmarthomeDevices)
      return this.equals((SmarthomeDevices)that);
    return false;
  }

  public boolean equals(SmarthomeDevices that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_projectors = true && this.isSetProjectors();
    boolean that_present_projectors = true && that.isSetProjectors();
    if (this_present_projectors || that_present_projectors) {
      if (!(this_present_projectors && that_present_projectors))
        return false;
      if (!this.projectors.equals(that.projectors))
        return false;
    }

    boolean this_present_printers = true && this.isSetPrinters();
    boolean that_present_printers = true && that.isSetPrinters();
    if (this_present_printers || that_present_printers) {
      if (!(this_present_printers && that_present_printers))
        return false;
      if (!this.printers.equals(that.printers))
        return false;
    }

    boolean this_present_players = true && this.isSetPlayers();
    boolean that_present_players = true && that.isSetPlayers();
    if (this_present_players || that_present_players) {
      if (!(this_present_players && that_present_players))
        return false;
      if (!this.players.equals(that.players))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProjectors()) ? 131071 : 524287);
    if (isSetProjectors())
      hashCode = hashCode * 8191 + projectors.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrinters()) ? 131071 : 524287);
    if (isSetPrinters())
      hashCode = hashCode * 8191 + printers.hashCode();

    hashCode = hashCode * 8191 + ((isSetPlayers()) ? 131071 : 524287);
    if (isSetPlayers())
      hashCode = hashCode * 8191 + players.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SmarthomeDevices other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetProjectors(), other.isSetProjectors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectors, other.projectors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrinters(), other.isSetPrinters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrinters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printers, other.printers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPlayers(), other.isSetPlayers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.players, other.players);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SmarthomeDevices(");
    boolean first = true;

    sb.append("projectors:");
    if (this.projectors == null) {
      sb.append("null");
    } else {
      sb.append(this.projectors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("printers:");
    if (this.printers == null) {
      sb.append("null");
    } else {
      sb.append(this.printers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("players:");
    if (this.players == null) {
      sb.append("null");
    } else {
      sb.append(this.players);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SmarthomeDevicesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SmarthomeDevicesStandardScheme getScheme() {
      return new SmarthomeDevicesStandardScheme();
    }
  }

  private static class SmarthomeDevicesStandardScheme extends org.apache.thrift.scheme.StandardScheme<SmarthomeDevices> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, SmarthomeDevices struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.projectors = new java.util.ArrayList<ProjectorDevice>(_list0.size);
                @org.apache.thrift.annotation.Nullable ProjectorDevice _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ProjectorDevice();
                  _elem1.read(iprot);
                  struct.projectors.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setProjectorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRINTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.printers = new java.util.ArrayList<PrinterDevice>(_list3.size);
                @org.apache.thrift.annotation.Nullable PrinterDevice _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new PrinterDevice();
                  _elem4.read(iprot);
                  struct.printers.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setPrintersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLAYERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.players = new java.util.ArrayList<PlayerDevice>(_list6.size);
                @org.apache.thrift.annotation.Nullable PlayerDevice _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new PlayerDevice();
                  _elem7.read(iprot);
                  struct.players.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setPlayersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, SmarthomeDevices struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.projectors != null) {
        oprot.writeFieldBegin(PROJECTORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.projectors.size()));
          for (ProjectorDevice _iter9 : struct.projectors)
          {
            _iter9.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.printers != null) {
        oprot.writeFieldBegin(PRINTERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.printers.size()));
          for (PrinterDevice _iter10 : struct.printers)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.players != null) {
        oprot.writeFieldBegin(PLAYERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.players.size()));
          for (PlayerDevice _iter11 : struct.players)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SmarthomeDevicesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public SmarthomeDevicesTupleScheme getScheme() {
      return new SmarthomeDevicesTupleScheme();
    }
  }

  private static class SmarthomeDevicesTupleScheme extends org.apache.thrift.scheme.TupleScheme<SmarthomeDevices> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SmarthomeDevices struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProjectors()) {
        optionals.set(0);
      }
      if (struct.isSetPrinters()) {
        optionals.set(1);
      }
      if (struct.isSetPlayers()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetProjectors()) {
        {
          oprot.writeI32(struct.projectors.size());
          for (ProjectorDevice _iter12 : struct.projectors)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetPrinters()) {
        {
          oprot.writeI32(struct.printers.size());
          for (PrinterDevice _iter13 : struct.printers)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetPlayers()) {
        {
          oprot.writeI32(struct.players.size());
          for (PlayerDevice _iter14 : struct.players)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SmarthomeDevices struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list15 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.projectors = new java.util.ArrayList<ProjectorDevice>(_list15.size);
          @org.apache.thrift.annotation.Nullable ProjectorDevice _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new ProjectorDevice();
            _elem16.read(iprot);
            struct.projectors.add(_elem16);
          }
        }
        struct.setProjectorsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list18 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.printers = new java.util.ArrayList<PrinterDevice>(_list18.size);
          @org.apache.thrift.annotation.Nullable PrinterDevice _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new PrinterDevice();
            _elem19.read(iprot);
            struct.printers.add(_elem19);
          }
        }
        struct.setPrintersIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.players = new java.util.ArrayList<PlayerDevice>(_list21.size);
          @org.apache.thrift.annotation.Nullable PlayerDevice _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new PlayerDevice();
            _elem22.read(iprot);
            struct.players.add(_elem22);
          }
        }
        struct.setPlayersIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

